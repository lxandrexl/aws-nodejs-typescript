service: api
frameworkVersion: '2'

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  peliculaTableName: 'pelicula-table-${self:provider.stage}'

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local

package:
  exclude:
    - 'node_modules/**'

disabledDeprecations:
  '*'

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    PELICULA_TABLE: ${self:custom.peliculaTableName}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - { "Fn::GetAtt": ["PeliculaDynamoDBTable", "Arn"] }

resources:
  Resources:
    PeliculaDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: peliculaId
            AttributeType: S
        KeySchema:
          -
            AttributeName: peliculaId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.peliculaTableName}
        
functions:
  getPeliculas:
    handler: handler.main
    events:
      - http: 
          path: /pelicula
          method: get
          cors: true
  getPelicula:
    handler: handler.main
    events:
      - http:
          path: /pelicula/{peliculaid}
          method: get
          cors: true
  crearPelicula:
    handler: handler.main
    events:
      - http:
          path: /pelicula
          method: post
          cors: true
      